#!/usr/bin/perl -w  #this enables useful warnings
#Originally written by E. McCartney-Melstad
#Adjusted by M.C. de Visser

use strict;                    # uses ' vars' , ' refs' , and ' subs' , to generate errors in case empty variables, symbolic references or bareword identifiers are used in improper ways
use warnings;                  # if triggered, it will indicate a ' problem '  exists, generates an error
use Parallel::ForkManager;     # used to perform a number of repetitive operations withing a single Perl script


#######################
### Specify samples ###
#######################

### Here you specify your sample names, it may seem like a tedious task, but with a known list of your samples and some basic REGEX / manipulation commands you can easily create the required text without manually having to type it all

my @samples = ("BW_0096_Fone", "BW_0097_Fone", "BW_0417_Ftwo", "BW_0418_Ftwo", "BW_0419_Ftwo", "BW_1177_Lvul", "BW_1199_Lvul", "BW_1226_Lmon", "BW_1511_Fone", "BW_1512_Bx", "BW_1513_Bx", "BW_1514_Bx", "BW_1531_Lvul", "BW_1557_Lhel", "BW_1563_Lbos", "BW_1569_Lmon", "BW_1571_Lmon", "BW_1577_Sper", "BW_1578_Ssal", "BW_1599_Clus", "BW_1600_Clus", "BW_1602_Nvir", "BW_1606_Casp", "BW_1609_Pgor", "BW_1610_Pwal", "BW_1611_Amex", "BW_1612_Epla", "BW_1613_Ccya", "BW_1614_Censpop", "BW_1616_Tvie", "BW_1617_Twen", "BW_1618_Eand", "BW_2132_Nder", "BW_2134_Mcau", "BW_2205_Tgra", "BW_2206_Tgra", "BW_2211_Triv", "BW_2213_Triv", "BW_2216_Tsie", "BW_2220_Tsie", "BW_2223_Ttor", "BW_2224_Ttor", "BW_2390_Tkar", "BW_3275_Tmac", "BW_3696_Tcri", "BW_5017_Tmar", "Ich_0016_Ialp", "PG_0882_Ttrade", "PG_0883_Ttrade", "PG_0885_Ttrade", "PG_1788_Tbozdag", "PG_1789_Tbozdag", "PG_1790_Tbozdag", "PG_1814_Tkarakadilar", "PG_1815_Tkarakadilar", "PG_1816_Tkarakadilar", "PG_2360_Tkesan", "PG_2361_Tkesan", "PG_2362_Tkesan", "PG_2579_Tshumnatitsa", "PG_2580_Tshumnatitsa", "PG_2581_Tshumnatitsa", "PG_2605_Tbolata", "PG_2606_Tbolata", "PG_2633_Tbolata", "PG_2846_Tkosmas", "PG_2847_Tkosmas", "PG_2848_Tkosmas", "PG_6105_Tsafaalan", "PG_6106_Tsafaalan", "PG_6107_Tsafaalan", "VIT_007_Ones", "VIT_491_Ooph");

print "Processing " . scalar(@samples) . " samples\n";   


####################################
### Trim 151st bp off with BBDuk ###
####################################

### First we want to get rid of the 151st bp that many reads have, which could be prone to error. 
### Adjust the BBduk folder name and the path+names of your desired in- and output files. Adjust the forkmanager number appropriately, if needed. Adjust the way of calling on software, if needed.

my @BBdukCommands;
foreach my $sample (@samples) {
    my $R1 = "/PATH/TO/RAW_READS/" . $sample . "_R1.gz";
    my $R2 = "/PATH/TO/RAW_READS/" . $sample . "_R2.gz";
    
    my $BBdukscript = "/PATH/TO/bbmap/bbduk.sh";    ### Make sure this bbmap folder and/or bbduk shell script are actually in the right place

    my $BBdukBaseNameR1 = "BBDUK_R1/" . $sample  . "_150_R1.gz";
    my $BBdukBaseNameR2 = "BBDUK_R2/" . $sample . "_150_R2.gz";

    push(@BBdukCommands, "$BBdukscript -Xmx4g in=$R1 out=$BBdukBaseNameR1 ftr=149");
    push(@BBdukCommands, "$BBdukscript -Xmx4g in=$R2 out=$BBdukBaseNameR2 ftr=149");
}

print ">>>>Running all BBduk commands\n";

my $BBdukFM = Parallel::ForkManager->new(16);
foreach my $BBdukCommand(@BBdukCommands) {
    $BBdukFM->start and next;
    print "Running the following command: \n$BBdukCommand\n";
    system($BBdukCommand);
    $BBdukFM->finish;
}
$BBdukFM->wait_all_children();

print "\n\n>>>>Finished running all BBduk commands\n\n";


################
### TRIMMING ###
################

### Here we trim universal adapters and low quality bases/reads
### Adjust the Trimmomatic folder name and the path+names of your desired in- and output files. Adjust the forkmanager number appropriately, if needed. Adjust the way of calling on software, if needed.

my $addReplaceFM = Parallel::ForkManager->new(16);

print "\n\nTrimming for adapter contamination, read length and quality using Trimmomatic!\n\n";

unless (-d "TRIMMOMATIC") {
    mkdir "TRIMMOMATIC";
}

foreach my $sample (@samples) {
    $addReplaceFM->start and next;
    
    my $R1 = "/PATH/TO/BBDUK_R1/" . $sample . "_150_R1.gz";
    my $R2 = "/PATH/TO/BBDUK_R2/" . $sample . "_150_R2.gz";
    
    my $adapterFile = "/PATH/TO/TruSeq2-PE_trimmomatic.fa";    ### This file is based on a list of generic sequences applicable to the type of data generated by Illumina. We provide the exact file we used in the Supplementary Materials belonging to the NewtCap manuscript.
    
    unless (-e $adapterFile) {die "$adapterFile not present!\n";}
    
    my $OP1 = "TRIMMOMATIC/" . $sample . "_150_R1_P_trimmomatic.fastq.gz";
    my $OU1 = "TRIMMOMATIC/" . $sample . "_150_R1_U_trimmomatic.fastq.gz";
    my $OP2 = "TRIMMOMATIC/" . $sample . "_150_R2_P_trimmomatic.fastq.gz";
    my $OU2 = "TRIMMOMATIC/" . $sample . "_150_R2_U_trimmomatic.fastq.gz"; 

    system("trimmomatic PE $R1 $R2 $OP1 $OU1 $OP2 $OU2 ILLUMINACLIP:$adapterFile:2:30:10 LEADING:5 TRAILING:5 SLIDINGWINDOW:5:20 MINLEN:50 -threads 12");       
    $addReplaceFM->finish;
}
$addReplaceFM->wait_all_children();

print "\n\n >>>>Finished trimming with Trimmomatic\n\n";


###########################
### SORT TRIMMED FASTQs ###
###########################

### Running this script will make sure the R1 and R2 FASTQ files obtained after BBduk + Trimming are actually sorted and in sync again.
### This is necessary because otherwise BWA will not recognize read pairs that belong to each other, and hence mapping will fail
### This failure does not always occur, but sometimes it does, so if applicable this part of the script can be run (better safe than sorry!)

print "\n\n >>>>Sorting trimmed fastqs using BBmap\n\n";
  
system("/PATH/TO/bbmap_repair.sh"); ### Adjust the path to the place where you have the correct version (! it may be needed to adjust it) of your bash script, bbmap_repair.sh, which will in turn run the BBmap script repair.sh. We provide the bbmap_repair.sh script in our NewtCap repository on GitHub (in the 'Master_preprocessing_pipeline' folder).

print "\n\n >>>>Finished sorting trimmed fastqs using BBmap\n\n";


###############
### MAPPING ### 
###############

### Here we align the reads to a reference / we map the reads and create BAM files, which are compressed SAM files
### Adjust the mapping folder name and the path+names to your trimmed file location. Adjust the forkmanager number appropriately, if needed. Adjust the way of calling on software, if needed.

print "\n\n >>>>Mapping reads using BWA MEM\n\n";

unless (-d "MAPPING") {
    mkdir "MAPPING";
}
my $bwaFM = Parallel::ForkManager->new(16);
foreach my $sample (@samples) {
    $bwaFM->start and next;
    my $R1 = "TRIMMOMATIC/" . $sample . "_150_R1_P_trimmomatic-fixed.fastq.gz";
    my $R2 = "TRIMMOMATIC/" . $sample . "_150_R2_P_trimmomatic-fixed.fastq.gz";
    my $bam = "MAPPING/" . $sample . ".trimmomatic.bam";

    system("bwa mem -M /PATH/TO/Tdob_reference_7139unique.fasta $R1 $R2 | samtools view -bS - > $bam");   ### We provide this FASTA file that was used as a reference for read alignment in the Supplementary Materials belonging to the NewtCap manuscript.
    $bwaFM->finish; 
}
$bwaFM->wait_all_children();

print "\n\n >>>>Finished mapping reads using BWA mem\n\n";


##############
### ADD RG ### This part is optimized now!!!
##############

### Here we'll add RG information using picard AddOrReplaceReadGroups and mark duplicates. Adjust the path+names of the desired in- and output (so location to bam files) for the Read Group (RG) and Mark Dupliates (MD) steps,
### Also adjust the list file path+names in the end. Adjust the forkmanager number appropriately, if needed. Adjust the way of calling on software, if needed.

my $addReplaceFM = Parallel::ForkManager->new(16);
print "\n\nAdding read groups and marking duplicates with picard\n\n";
foreach my $sample (@samples) {
    $addReplaceFM->start and next;

    my $input = "/MAPPING/$sample.trimmomatic.bam";
    my $output = "/MAPPING/$sample.RG.trimmomatic.bam";
    my $SM = $sample;
    my $RGLB = $SM . '-lib1';
    my $RGID = $sample;

    system("java -jar \$EBROOTPICARD/picard.jar AddOrReplaceReadGroups I=$input O=$output RGLB=$RGLB RGPL=ILLUMINA RGSM=$SM RGID=$RGID RGPU=NA SORT_ORDER=coordinate");
     
    my $MDout = "/MAPPING/$sample.trimmomatic.dedup.bam";
    my $metrics = "/MAPPING/$sample.trimmomatic.dedup.metrics";
    system("java -jar \$EBROOTPICARD/picard.jar MarkDuplicates I=$output O=$MDout M=$metrics");
    system("samtools index $MDout");
    unlink($input, $output);
    $addReplaceFM->finish;
}
$addReplaceFM->wait_all_children();

print "\n\n >>>>Finished adding read groups and marking duplicates with picard\n\n";

open(my $bqFH, ">", "/MAPPING/mapping_trimmo_smallref7139_NEW/dedupBams.list");
foreach my $sample (@samples) {
	print $bqFH "/MAPPING/$sample.trimmomatic.dedup.bam" . "\n";
}
close($bqFH);


#######################
### VARIANT CALLING ###
#######################

### Here we will do the first round of variant calling, which will generate raw g.vcf files. 
### Adjust the variants_trimmo_smallref7139_P folder name and the path+names of the desired in- and output and the folder to store temporary files. Adjust the forkmanager number accordingly, if needed. Adjust the way of calling on software, if needed.

unless(-d "VARIANTS") {
    mkdir("VARIANTS");
}
print "\n\nRunning haplotypeCaller to generate g.vcfs\n\n";

my $hapCallerFM = Parallel::ForkManager->new(16);
foreach my $sample (@samples) {
    $hapCallerFM->start and next;
    my $inputBAM = "MAPPING/" . $sample . ".trimmomatic.dedup.bam";
    my $gVCF = "VARIANTS/" . $sample . ".raw.g.vcf";

    system("gatk --java-options '-DGATK_STACKTRACE_ON_USER_EXCEPTION=true' HaplotypeCaller --reference /PATH/TO/Tdob_reference_7139unique.fasta -ERC GVCF -I $inputBAM -O $gVCF --tmp-dir /PATH/TO/TEMPORARY_FILES_FOLDER"); 
    $hapCallerFM->finish;
}

$hapCallerFM->wait_all_children();

print "\n\nFinished running first round of haplotypeCaller to generate raw gvcfs\n\n";


############################
### GenomicsDBImport, ERC### 
############################


### Here we'll combine the gvcfs, and then perform joint-genotype calling, to create the raw, multi-sample gVCF file
### Adjust the list of the (paths to the) raw g.vcf files accordingly. Again this may seem like a tedious task, but when you have a list of your sample names, you can use basic REGEX / manipulation commands 
### Also adjust the path/name of the desired database in the GenomicsDBImport step, and use the same database name as input in the GenotypeGVCFs step. Adjust the path names for the (temporary) output and adjust the way of calling on software, if needed.

print "\n\nCombining gvcfs with GDBI to generate ms-gVCF file to use for joint-genotype calling\n\n";

system("gatk --java-options '-Xms800m -Xmx100g -DGATK_STACKTRACE_ON_USER_EXCEPTION=true' GenomicsDBImport" .
" -V VARIANTS/BW_0096_Fone.raw.g.vcf" .
" -V VARIANTS/BW_0097_Fone.raw.g.vcf" .
" -V VARIANTS/BW_0417_Ftwo.raw.g.vcf" .
" -V VARIANTS/BW_0418_Ftwo.raw.g.vcf" .
" -V VARIANTS/BW_0419_Ftwo.raw.g.vcf" .
" -V VARIANTS/BW_1177_Lvul.raw.g.vcf" .
" -V VARIANTS/BW_1199_Lvul.raw.g.vcf" .
" -V VARIANTS/BW_1226_Lmon.raw.g.vcf" .
" -V VARIANTS/BW_1511_Fone.raw.g.vcf" .
" -V VARIANTS/BW_1512_Bx.raw.g.vcf" .
" -V VARIANTS/BW_1513_Bx.raw.g.vcf" .
" -V VARIANTS/BW_1514_Bx.raw.g.vcf" .
" -V VARIANTS/BW_1531_Lvul.raw.g.vcf" .
" -V VARIANTS/BW_1557_Lhel.raw.g.vcf" .
" -V VARIANTS/BW_1563_Lbos.raw.g.vcf" .
" -V VARIANTS/BW_1569_Lmon.raw.g.vcf" .
" -V VARIANTS/BW_1571_Lmon.raw.g.vcf" .
" -V VARIANTS/BW_1577_Sper.raw.g.vcf" .
" -V VARIANTS/BW_1578_Ssal.raw.g.vcf" .
" -V VARIANTS/BW_1599_Clus.raw.g.vcf" .
" -V VARIANTS/BW_1600_Clus.raw.g.vcf" .
" -V VARIANTS/BW_1602_Nvir.raw.g.vcf" .
" -V VARIANTS/BW_1606_Casp.raw.g.vcf" .
" -V VARIANTS/BW_1609_Pgor.raw.g.vcf" .
" -V VARIANTS/BW_1610_Pwal.raw.g.vcf" .
" -V VARIANTS/BW_1611_Amex.raw.g.vcf" .
" -V VARIANTS/BW_1612_Epla.raw.g.vcf" .
" -V VARIANTS/BW_1613_Ccya.raw.g.vcf" .
" -V VARIANTS/BW_1614_Censpop.raw.g.vcf" .
" -V VARIANTS/BW_1616_Tvie.raw.g.vcf" .
" -V VARIANTS/BW_1617_Twen.raw.g.vcf" .
" -V VARIANTS/BW_1618_Eand.raw.g.vcf" .
" -V VARIANTS/BW_2132_Nder.raw.g.vcf" .
" -V VARIANTS/BW_2134_Mcau.raw.g.vcf" .
" -V VARIANTS/BW_2205_Tgra.raw.g.vcf" .
" -V VARIANTS/BW_2206_Tgra.raw.g.vcf" .
" -V VARIANTS/BW_2211_Triv.raw.g.vcf" .
" -V VARIANTS/BW_2213_Triv.raw.g.vcf" .
" -V VARIANTS/BW_2216_Tsie.raw.g.vcf" .
" -V VARIANTS/BW_2220_Tsie.raw.g.vcf" .
" -V VARIANTS/BW_2223_Ttor.raw.g.vcf" .
" -V VARIANTS/BW_2224_Ttor.raw.g.vcf" .
" -V VARIANTS/BW_2390_Tkar.raw.g.vcf" .
" -V VARIANTS/BW_3275_Tmac.raw.g.vcf" .
" -V VARIANTS/BW_3696_Tcri.raw.g.vcf" .
" -V VARIANTS/BW_5017_Tmar.raw.g.vcf" .
" -V VARIANTS/Ich_0016_Ialp.raw.g.vcf" .
" -V VARIANTS/PG_0882_Ttrade.raw.g.vcf" .
" -V VARIANTS/PG_0883_Ttrade.raw.g.vcf" .
" -V VARIANTS/PG_0885_Ttrade.raw.g.vcf" .
" -V VARIANTS/PG_1788_Tbozdag.raw.g.vcf" .
" -V VARIANTS/PG_1789_Tbozdag.raw.g.vcf" .
" -V VARIANTS/PG_1790_Tbozdag.raw.g.vcf" .
" -V VARIANTS/PG_1814_Tkarakadilar.raw.g.vcf" .
" -V VARIANTS/PG_1815_Tkarakadilar.raw.g.vcf" .
" -V VARIANTS/PG_1816_Tkarakadilar.raw.g.vcf" .
" -V VARIANTS/PG_2360_Tkesan.raw.g.vcf" .
" -V VARIANTS/PG_2361_Tkesan.raw.g.vcf" .
" -V VARIANTS/PG_2362_Tkesan.raw.g.vcf" .
" -V VARIANTS/PG_2579_Tshumnatitsa.raw.g.vcf" .
" -V VARIANTS/PG_2580_Tshumnatitsa.raw.g.vcf" .
" -V VARIANTS/PG_2581_Tshumnatitsa.raw.g.vcf" .
" -V VARIANTS/PG_2605_Tbolata.raw.g.vcf" .
" -V VARIANTS/PG_2606_Tbolata.raw.g.vcf" .
" -V VARIANTS/PG_2633_Tbolata.raw.g.vcf" .
" -V VARIANTS/PG_2846_Tkosmas.raw.g.vcf" .
" -V VARIANTS/PG_2847_Tkosmas.raw.g.vcf" .
" -V VARIANTS/PG_2848_Tkosmas.raw.g.vcf" .
" -V VARIANTS/PG_6105_Tsafaalan.raw.g.vcf" .
" -V VARIANTS/PG_6106_Tsafaalan.raw.g.vcf" .
" -V VARIANTS/PG_6107_Tsafaalan.raw.g.vcf" .
" -V VARIANTS/VIT_007_Ones.raw.g.vcf" .
" -V VARIANTS/VIT_491_Ooph.raw.g.vcf" .
" --max-num-intervals-to-import-in-parallel 20 --genomicsdb-workspace-path MY_NEWTCAP_DATABASE" .
" --intervals /PATH/TO/sorted_ref_7139unique_targetnames.list --merge-contigs-into-num-partitions 1 --tmp-dir /PATH/TO/TEMPORARY_FILES_FOLDER");   ### Note that this is a list based on the reference FASTA file used, and we provided this exact list/file in the Supplementary Materials belonging to the NewtCap manuscript.

print "\n\nFinished combining gvcfs with GDBI to generate ms-gVCF file to use for joint-genotype calling\n\n";

### Here we'll perform joint-genotype calling as to truly 'fill in' the merged gVCF file with the correct genotypes/SNP calls

print "\n\nPerforming joint-genotype calling using the created database\n\n";

system("gatk --java-options '-Xms800m -Xmx110g -DGATK_STACKTRACE_ON_USER_EXCEPTION=true' GenotypeGVCFs" .
" -R /PATH/TO/Tdob_reference_7139unique.fasta" .
" -V gendb://MY_NEWTCAP_DATABASE" .
" -O VARIANTS/ERC_jointgeno.g.vcf" .
" --tmp-dir /PATH/TO/TEMPORARY_FILES_FOLDER");

print "\n\nFinished joint-genotype calling, created raw ms-gVCF. Move on to downstream analyses! \n\n";
